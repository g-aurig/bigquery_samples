--creates Common Table Expression, a temporary result set that can be referenced within the main query
WITH engagement_data AS (
--column's to pull data from
SELECT
    --creating a column that combines source & medium
CONCAT(traffic_source.source, ' - ', traffic_source.medium) AS source_medium,
user_pseudo_id,
    --logic to count if session was an engaged session for a unique user
COUNT(DISTINCT CASE WHEN (SELECT value.string_value FROM UNNEST(event_params) WHERE key = 'session_engaged') = '1' THEN CONCAT(user_pseudo_id, (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id')) END) AS engaged_sessions,
    --logic to count all sessions that had a unique user
COUNT(DISTINCT CONCAT(user_pseudo_id, (SELECT value.int_value FROM UNNEST(event_params) WHERE key = 'ga_session_id'))) AS total_sessions
--table to pull data from
FROM
`bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`
--returns the rows matching the condition
WHERE
event_name = 'page_view'
--result represents a unique combination of the grouped columns
GROUP BY
source_medium, user_pseudo_id
)
--column's to pull the data from
SELECT
source_medium,
    --calculating the average engagement rate with two decimal places 
ROUND(AVG(engaged_sessions / total_sessions),2) AS avg_engagement_rate
--temporary table to pull data from
FROM
engagement_data
--result represents a unique combination of the grouped columns
GROUP BY
source_medium
--sorting the result descending based on the column
ORDER BY
avg_engagement_rate DESC
